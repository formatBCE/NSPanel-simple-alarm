# NSPanel YAML by marcfager. Please check github for credits: https://github.com/marcfager/nspanel-mf
# Version 2022-01-19

substitutions:
  # Name the device and it's entities
  device_name: nspanel

# Example config.yaml
esphome:
  name: nspanel

esp32:
  board: esp32dev

# Wifi settings. Add these to your secrets.yaml. fast_connect must be true for a hidden ssid.
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  services:
    # Show idle screen
    - service: set_idle
      then:
        - lambda: id(disp1).send_command_printf("page 0");
    # Show alarm arm screen
    - service: show_arm_screen
      then:
        - lambda: id(disp1).send_command_printf("page 1");
        - rtttl.play:
            rtttl: 'one short:d=4,o=5,b=100:16e6'
    # Show armed popup
    - service: show_armed_popup
      then:
        - lambda: id(disp1).send_command_printf("page 3");
    # Show disarmed popup
    - service: show_disarmed_popup
      then:
        - lambda: id(disp1).send_command_printf("page 4");
        - rtttl.play:
            rtttl: 'one high short:d=4,o=5,b=100:16e7'
    # Show alarm disarm screen
    - service: show_code_screen
      variables:
        status: string
      then:
        - lambda: id(disp1).send_command_printf("page 2");
        - lambda: id(disp1).set_component_text_printf("CodeScreen.tStatus", "%s", status.c_str());
        - rtttl.play:
            rtttl: 'two short:d=4,o=5,b=100:8e6,8e6'
    # Show alarm triggered screen
    - service: show_triggered
      then:
        - lambda: id(disp1).send_command_printf("page 5");
        - rtttl.play:
            rtttl: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
        
    # Service to play a rtttl tone
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    # Service to update the HMI file
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    # Service to control the visible page from Home Assistant
    - service: set_page
      variables:
        page: int
      then:
        - lambda: id(disp1).send_command_printf("page %i", page);
    # Service to send a command directly to the display. Useful for testing
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

# Logger. Disable the temperature sensor etc. to focus on the HMI development
logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: WARN
    resistance: WARN
    text_sensor: WARN
    ntc: WARN

# Uart for the Nextion display
uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

# Functionality for the Nextion display
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

# A reboot button is always useful
button:
  - platform: restart
    name: $device_name Restart

# Binary sensors
binary_sensor:
  # Left button below the display
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1

  # Right button below the display
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2



output:
  # Buzzer for playing tones
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21
      
switch:
  - platform: nextion
    id: arm_button
    name: "Arm button"
    component_name: bArm
    update_interval: 100ms
    
  - platform: nextion
    id: ok_button
    name: "OK button"
    component_name: bOk
    update_interval: 100ms
    
  # Physical relay 1
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22

  # Physical relay 2
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Basically a global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display.
  - platform: template
    name: $device_name Nextion inited
    id: nextion_init
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true
    
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

# Rtttl function for buzzer
rtttl:
  id: buzzer
  output: buzzer_out

sensor:
  # Internal temperature sensor, adc value
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Internal temperature sensor, adc reading converted to resistance (calculation) 
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  # Internal temperature sensor, resistance to temperature (calculation)
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature

  # Uptime for the display. Also updates a human readable one (further down)
  - platform: uptime
    name: $device_name Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                int seconds = round(id(uptime_sensor).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? (to_string(days) + "d ") : "") +
                  (hours ? (to_string(hours) + "h ") : "") +
                  (minutes ? (to_string(minutes) + "m ") : "") +
                  (to_string(seconds) + "s")
                ).c_str();

  # WiFi signals strength sensor
  - platform: wifi_signal
    name: $device_name WiFi Signal Sensor
    update_interval: 60s

text_sensor:
  - platform: nextion
    name: $device_name code
    component_name: varCode
    update_interval: 200ms

  # Uptime in a human readable form. Updated from the uptime sensor
  - platform: template
    name: $device_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  # ESPHome version used to compile the app
  - platform: version
    name: $device_name ESPHome Version

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: "http://192.168.1.1:8123/local/nextion/alarm.tft"
    # A little fun...
    on_setup:
      then:
        - lambda: id(disp1).send_command_printf("page 0");
        - wait_until:
            api.connected
        - switch.template.publish:
            id: nextion_init
            state: on
        - lambda: id(disp1).send_command_printf("dim=0");
    